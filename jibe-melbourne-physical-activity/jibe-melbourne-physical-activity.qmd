---
title: "Modelling physical activity in Melbourne"
format: gfm
execute:
  # no data is to be included in this document, unless intentionally over-ridden
  output: false 
knitr:
  opts_chunk: 
    collapse: true
---

This Quarto markdown document is intended to contain code to predict physical activity for sport and recreation excluding walking and cycling, given explanatory variables (age, sex, SES, education, has car, etc) that align with the JIBE synthetic population data. This will be conducted to predict physical activity for residents of Melbourne, Australia, using the Australian Bureau of Statistics Australian National Health Survey data (2017-18).

The analysis draws on Belen Zapata-Diomedi's code for cleaning the NHS dataset (../document.qmd), and Belen Zapata-Diomedi, Qin Zhang and Marina Berdokhova's code for a predictive model of marginal metabolic equivalent hours per week (mMET house/week) for Manchester, UK.

## Dependencies

Analysis was conducted using R 4.4.1 using a Quarto markdown document (Quarto 1.5.55) in Positron IDE (2024.10.0), with renv 1.0.11 for package management.

The following packages have been installed using renv:

```         
renv::install(c('dplyr','corrplot','vtable','rmarkdown'))
```

In principle, the R environment for this notebook should be able to be restored by running

```         
renv::restore()
```

Load libaries

```{r}
library(dplyr)
library(vtable)
library(corrplot)
library(ggplot2)
```

## Data

[National Health Survey](https://www.abs.gov.au/statistics/microdata-tablebuilder/available-microdata-tablebuilder/national-health-survey) (NHS) data for 2017-18 were retrieved from the [Microdata Downloads](https://microdatadownload.abs.gov.au/MicrodataDownload/login.xhtml) section of the Australian Bureau of Statistics website on 3 December 2024. ABS Microdata were accessed under the [ABS/Universities Australia Agreement (2024)](https://www.abs.gov.au/statistics/microdata-tablebuilder/absuniversities-australia-agreement) by Carl Higgs (RMIT University). The NHS Microdata data descriptions are available for download [here](https://www.abs.gov.au/statistics/microdata-tablebuilder/available-microdata-tablebuilder/national-health-survey#data-item-lists).

NHS microdata are provided in CSV, SAS, SPSS, or Stata formats. The CSV data do not have labels, hence the `haven` package could be installed to read the labelled data in .dta (Stata) format. However, perhaps labels are not required --- for now, CSV will be used to keep things simple.

| File (csv, dta, etc) | Description                |
|----------------------|----------------------------|
| NHS17HHB             | Household level data       |
| NHS17SPB             | Person level data          |
| NHS17A3B             | Alcohol day level data     |
| NHS17A4B             | Alcohol type level data    |
| NHS17CNB             | Conditions level data      |
| NHS17MDB             | Medications level data     |
| NHS17HLB             | Health Literacy level data |

: ABS NHS 2017-18 Microdata files

The household data contain geographic attributes and could potentially be used to restrict the sample, e.g. to residents of urban areas within Greater Melbourne. Sensitivity analysis could be conducted to evaluate the impact of this decision, e.g. relative to all persons and all persons living in Australian urban regions.

Household variables of interest include:

| Variable | Description | Comment |
|------------------|----------------------|--------------------------------|
| ABSHIDB | Household identifier | Link with persons |
| STATE16 | State or Territory (ASGS 2016) | 2 == Victoria |
| NUMPERBC | Number
of persons  in household | 0, 1, 2, 3, 4, 5, 6==6+ |
| SA1SF2DN | SEIFA - Index of Relative Socio-economic Disadvantage - 2016 - SA1 - Deciles - National |  |

Person-level variables of interest (see data dictionaries for detailed codes) include:

| Variable | Description | Comment |
|------------------|----------------------|--------------------------------|
| ABSPID | Person identifier | person number within household |
| ABSHIDB | Household identifier | Link with households, but actually does not match for CURF records |
| AGEB | Age of person | 1== 0-4 years  … 19 == 85 years+ |
| SEX | Sex of person | 1==Male, 2==Female |
| LFSBC | Labour force status | 0==NA, 1==Employed, 2==Unemployed, 3==Not in the labour force |
| HYSCHCBC | Highest year of school completed | 0==NA, 1==Postgraduate, ... 13==Never attended school |
| HIGHLVLBC | Level of highest educational attainment | 0==NA, 1==Postgraduate, ... 13==Never attended school |
| EMPSTAT | Labour force full-time/part-time status | 0==NA, 1==Employed full time ... 6 Not in labour force |
|Walk for recreation (mins)| EXFSRMIN | Total minutes walked for fitness, recreation or sport in last week (for at least 10 minutes) |
|Walk for transport (mins) | EXTRAMIN | Total minutes spent walking for transport in last week (for at least 10 minutes) |
|Moderate exercise (mins) | EXLWMMIN | Total minutes undertaken moderate exercise last week (for example, a light jog, strenght and toning exercises, lifting small boxes and sweeping)|
|Vigorous exercise (mins)| EXLWVMIN | Total minutes undertaken vigorous exercise last week (for example, playing basketball, running, lifting heavy boxes, and strength and toning exercises)|

## Methods

### Read and join NHS data
Adults aged 18 years and over from the persons dataset are left joined to the household data, with only the relevant variables retained.  The core exposure variables are renamed to enhance readability of the subsequent code.  

```{r}
data_dir <- '/Users/E33390/Library/CloudStorage/OneDrive-RMITUniversity/projects/abs/microdata/NHS2017-18_CSV/NHS2017-18_CSV/'
data <- list(
    households = read.csv(paste0(data_dir,'NHS17HHB.csv')),
    persons = read.csv(paste0(data_dir,'NHS17SPB.csv'))
)
```


```{r}
#| output: true

nhs <- dplyr::left_join(
            data$households %>% 
                select(
                    c( 
                        "ABSHIDB",
                        "STATE16", 
                        "NUMPERBC",
                        "SA1SF2DN"
                    )
                ),
            data$persons %>% 
                select(
                    c(
                        "ABSHIDB",
                        "ABSPID",
                        "AGEB",
                        "SEX",
                        "LFSBC",
                        "STDYFTPT",
                        "HYSCHCBC",
                        "HIGHLVBC",
                        "EXFSRMIN",
                        "EXTRAMIN",
                        "EXLWMMIN",
                        "EXLWVMIN"
                    )
                ) %>% rename(
                    walk_recreation_min=EXFSRMIN,
                    walk_transport_min=EXTRAMIN,
                    mod_excercise_min=EXLWMMIN,
                    vig_excercise_min=EXLWVMIN
                )%>% 
                filter(
                    AGEB > 4
                ), 
        by = c("ABSHIDB")
        ) 
nhs %>% st(out='kable')
```

### Read and consider the synthetic population data

To predict mMETs for the synthetic population, we need to understand how the variables are structured and ensure that our NHS derived data that we will use in modelling has a comparable structure.  We'll load up the data and consider a summary of variables to better understand this.

```{r}
#| output: true
pp=readRDS("../../../melbourne/synthetic_population/population_final.rds")
pp %>% st(out='kable')
```

Considering the above, I think the following points are worth considering as model refinements:

- Represent age in years 
(e.g. using bracket mid-point) as "Age".  This would better model age as a continuous variable, for direct prediction using the synthetic population.  A caveat to that would be consideration of whether age is better modelled as linearly (a more parsimonious approach) or non-linearly (which its current treatment as a factor variable allows for, but complicates things and doesn't directly translate to the synthetic population variable that is continuous age in years).
  - on the other hand, there is an `age_cat` variable, however I think the model would have more power if age could be modelled as continuous.  Having said that it will be good to consult with Belen and Qin to get their recommendations and plans for usage.
- Represent sex as a binary indicator 'female' having 0 (male) and 1 (female)
- Simplify employment as a binary variable "is_employed" with values of 0 (no) and 1 (yes).
- Simplify education as a three level variable education, having values 'low', 'medium', 'high'.  While it might be that this could be represented as a pseudo continuous variable (0, 1, 2), I think its best to not assume its linear and leave it as a categorical factor variable.  Break points for low, medium and high may be subjective; need to consult what this represent in synthetic population.  For now, have assumed any tertiary education (Bachelor and higher) is high; Year 10, 11, 12, and Certificates higher than III are medium; and certificates I/II, or Year 9 or lower is low.
- There is a variable 'IRSAD' that might be disadvantage but it ranges from -1 to 11, so is not clear what this represents (not simply deciles, and not quintiles)
- other considerations:
  - The synthetic population seems to have 'student' as a category in RelationshipStatus -- if that does identify someone as a student, then perhaps we can consider 'is_student' in the model for mMETs.
  - hhSize is present in synthetic population. It may not be conceptually relevant, but is present in household data for NHS, so we could consider its appropriateness for the model.
  - hhCar is in synethic population, but there is no data to represent this in the NHS data, that I can see.

### Data preparation

Missing data or NA values (e.g 99997 and 99998) are replaced as missing, while maximum values of walking time variables are truncated at 840 minutes to constrain influence of extreme outliers.  

SA1 Index of Relative Socio-economic Disadvantage (IRSD; `SA1SF2DN`) is rescaled to use quintiles rather than deciles, for consistency with the synthetic population, with '1' being most deprived and '5' being least deprived.

Two age variables will be created for consideration, first as a factor variable and second in years, using the first age bracket year.

To match the synthetic population data for Melbourne a binary indicator 'is_employed' will be created, along with a possible supplementary indicator 'is_student' that could be derived for the synthetic population.

Education will be summarised using categories of low, medium and high for direct comparison with the synthetic population.

Marginal metabolic equivalent house per week (mMET hours/week; `mmet`) are calculated as the sum of hours spent walking for recreation, walking for transport, doing moderate exercise and doing vigorous exercise, with each respectively multiplied by the metabolic equivalent of these tasks (METs).

When deriving factor variables I have set ordered to False, as the alternative setting needlessly over-complicates the modelling (i.e. derives polynomial functions) and limits our capacity to transfer predictions for the synthetic population (see https://stackoverflow.com/questions/57297771/interpretation-of-l-q-c-4-for-logistic-regression).

Remember that SA1 IRSD ranges from 1 (most deprived) to 5 (least deprived).

```{r}
#| output: true
MMET_MOD <- 3.5 # As in meta analysis GArcia et al. 
MMET_VIG <- 7 # As in meta analysis GArcia et al. 
MMET_CYCLING <- 5.8 # From ithimr (check)
MMET_WALKING <- 2.5 # From ithimr (check)

pa_data <- nhs  %>%
    mutate_all(~ ifelse( . %in% c(99997, 99998), NA, .)) %>%
    mutate(
        walk_recreation_min = case_when(
                walk_recreation_min > 840 ~ 840, 
                TRUE ~  walk_recreation_min # handles unexpected values using default
            ),
        walk_transport_min = case_when(
                walk_transport_min > 840 ~ 840, 
                TRUE ~ walk_transport_min
            ),
        mod_excercise_min = case_when(
                mod_excercise_min > 840 ~ 840, 
                TRUE ~ mod_excercise_min
            ),
        vig_excercise_min = case_when(
                vig_excercise_min > 840 ~ 840, 
                TRUE ~ vig_excercise_min
            )
    ) %>%
    mutate(
        irsd_sa1 = case_when(
            SA1SF2DN %in% c(1, 2) ~ 1,
            SA1SF2DN %in% c(3, 4) ~ 2,
            SA1SF2DN %in% c(5, 6) ~ 3,
            SA1SF2DN %in% c(7, 8) ~ 4,
            SA1SF2DN %in% c(9, 10) ~ 5
        )
    ) %>% 
  mutate(
    age_years = case_when(
        AGEB == 5 ~ 18,
        AGEB == 6 ~ 20,
        AGEB == 7 ~ 25,
        AGEB == 8 ~ 30,
        AGEB == 9 ~ 35,
        AGEB == 10 ~ 40,
        AGEB == 11 ~ 45,
        AGEB == 12 ~ 50,
        AGEB == 13 ~ 55,
        AGEB == 14 ~ 60,
        AGEB == 15 ~ 65,
        AGEB == 16 ~ 70,
        AGEB == 17 ~ 75,
        AGEB == 18 ~ 80,
        AGEB == 19 ~ 85,
        TRUE ~ NA_real_  # Handle unexpected values
    ),
        AGEB = factor(
            AGEB, 
            levels = 5:19, 
            labels = c("18-19","20-24", "25-29", "30-34", "35-39", 
                        "40-44", "45-49", "50-54", "55-59", 
                        "60-64", "65-69", "70-74", "75-79", 
                        "80-84", "≥85"),
            ordered = FALSE
        ),
    female=ifelse(SEX==2,1,0),
    is_employed=case_when(
            LFSBC==1 ~ 1,
            LFSBC %in% c(0,2,3) ~ 0
        ),
    is_student=ifelse(STDYFTPT %in% c(1,2),1,0),
    education = case_when(
        HIGHLVBC %in% c(1,2) ~ 2,
        HIGHLVBC %in% c(3,7) ~ 1,
        HIGHLVBC %in% c(8,12) ~ 0,
        TRUE ~ NA_real_  # Handle unexpected values
        ),
    education = factor(
        education,
        levels=0:2,
        labels=c('low','medium','high'),
        ordered=FALSE
    )
    )  %>%
    mutate(
        mmet_hours_per_week=walk_recreation_min/60* MMET_WALKING +
             walk_transport_min/60 * MMET_WALKING + 
             mod_excercise_min/60 * MMET_MOD + 
             vig_excercise_min/60 * MMET_VIG
    )  %>%
    mutate(
        mmet_hours_per_week_zero = ifelse(mmet_hours_per_week == 0, 1, 0)
    ) 

pa_data %>% st(out='kable')
```

### Exploratory data analysis

#### Age


mMET hours per week by age backet -- there may be some non-linearity (e.g. 18-19 year olds median METS are lower, but perhaps not meaningfully so), but broadly, younger people have higher mMETs:
```{r}
#| output: true
ggplot(pa_data,aes(x=AGEB, y=mmet_hours_per_week)) + geom_boxplot() + coord_flip()
qplot(x=pa_data$age_years,y=pa_data$mmet_hours_per_week, geom='smooth', span =0.5)
```

Looking at the qplot, to me it seems reasonable on grounds of parsimony to model the relationship between age and mMET hours/week as a linear function.  There is a drop off after 70, however our data is relatively sparse beyond there and our last category does capture persons older than 85. Its easier to interpret the story from the qplot than boxplots too. 

#### Correlations
For now I have included both education variables in the below exploratory data analysis, although most likely a derived combined variable for education will be used, pending discussion with the team.  The State variable is also included to get a sense of how variables differ across Australian states; Victorian-specific results could be expected to be mostly drawn from Melbourne, and this could be explored in a sensitivity analysis.

Many of our variables are factor variables for which direct numeric correlations could be misleading (i.e. they aren't necessarily ordinal or linear, e.g. labour force status, or 'NA' values in educational attainment).
```{r}
#| output: true
cor=as.data.frame(lapply(pa_data[, c("irsd_sa1", "age_years", "female", "is_employed", "is_student", "education", "NUMPERBC", "mmet_hours_per_week")], as.numeric))
cor=na.omit(cor)
correlation_matrix <- cor(cor) %>% as.data.frame()
# corrplot(correlation_matrix %>% as.double(), method = "number",order = "FPC",type="lower") 
correlation_matrix[order(correlation_matrix$mmet_hours_per_week),] %>% round(2)
```

None of the variables in themselves are strongly associated with mMET hours/week. As indicated above, age in years has a negative association.  Being female is similarly associated with lower mMET hours/week.   Number of persons in household and being a student were not associated with mMETs and need not be included in the model.  Employment, lower socio-economic deprivation, and higher degree of education had weak positive associations with mMET hours/week.

#### Clustering
Persons are theoretically clustered within households.  If there is more than one person within each household, as this data structure implies, this clustering should be accounted for in the model.  The following checks the maximum number of persons within households, and confirms that only one person is associated with each household and so clustering within households will not be required in the model.

```{r}
#| output: true
pa_data %>%
  group_by(ABSHIDB) %>%
  summarise(num_persons = n()) %>%
  summarise(max_persons = max(num_persons))
```

#### Set up data for modelling
Select relevant variables and only retain records with full data.
```{r}
#| output: true
pa_data =pa_data%>%
  select(ABSPID, age_years, female, is_employed, education, irsd_sa1, mmet_hours_per_week, mmet_hours_per_week_zero)%>%
  na.omit()

pa_data %>% st(out='kable')
```

Copy a subset of data for persons who record at least some mMET hours/week
```{r}
#| output: true
pa_data_over0=pa_data[pa_data$mmet_hours_per_week>0,]
pa_data_over0 %>% st(out='kable')
```

### Modelling
The modelling approach (and earlier data preparation) draws on code from the Manchester physical activity modelling R code file `otherSportPA_hurdle_v3.R` authored by Qin Zhang, Belen Zapata-Diomedi and Marina Berdokhova.

```{r}
MonteCarlo_otherSport <- function(model, data,facetVar = NA) {
  sport.var <- as.character(model$formula[2])
  
  probability.matrix <- as.vector(predict(model,data,type = "response"))
  MC.prediction <- rep(NA,nrow(data))
  for(n in c(1:nrow(data))) {
    MC.prediction[n] <- runif(1)<=probability.matrix[n]
  }
  
  data=data%>%mutate(zeroPrediction=MC.prediction)
  
  return(data)
}
```

#### Modelling mMETS hours/week
```{r}
#| output: true
m.otherSport <- list()

m.otherSport$linear <- lm(
    mmet_hours_per_week ~ female+age_years+is_employed+education+irsd_sa1,
    data = pa_data_over0)
summary(m.otherSport$linear)
```

#### Modelling zero mMETS hours/week
```{r}
#| output: true
m.otherSport$zeroModel <- glm(
    mmet_hours_per_week_zero ~ female+age_years+is_employed+education+irsd_sa1,
    family = "binomial",
    data = pa_data
)

summary(m.otherSport$zeroModel)
```

#### Modelling outputs

Save the model outputs for usage later
```{r}
#| output: true
# Get today's date
today_date <- format(Sys.Date(), "%d%m%Y")

# Save the RDS file with today's date in the filename
saveRDS(m.otherSport, paste0("model_sport_", today_date, ".rds"))
```

```{r}
prediction=MonteCarlo_otherSport(m.otherSport$zeroModel,m.otherSport$zeroModel$data)
confusion=prediction%>%group_by(mmet_hours_per_week_zero,zeroPrediction)%>%count()
```

### Predicting mMET hours/week for synthetic population

Now we need to get our synthetic population data into the equivalent format to our model, e.g. by converting string categorical variables to binary indicators and adapting the SEIFA IRSD to quintiles.  Then we can use our predictions and apply them to the synthetic population.

#### Synthetic population data preparation
```
#| output: true
data <- pp %>%
    mutate(
        irsd_sa1 = case_when(
            IRSAD %in% c(1, 2) ~ 1,
            IRSAD %in% c(3, 4) ~ 2,
            IRSAD %in% c(5, 6) ~ 3,
            IRSAD %in% c(7, 8) ~ 4,
            IRSAD %in% c(9, 10) ~ 5,
            TRUE ~ NA_real_  # Handle unexpected values
        ),
        age_years = Age,
        female=ifelse(Gender=="Female",1,0),
        is_employed=ifelse(is_employed=="Yes",1,0),
        education = case_when(
            education == 'high' ~ 2,
            education == 'medium' ~ 1,
            education == 'low' ~ 0,
            TRUE ~ NA_real_  # Handle unexpected values
            )
    ) %>%
    mutate(
        education = factor(
            education,
            levels=0:2,
            labels=c('low','medium','high'),
            ordered=FALSE
        )
    ) %>% 
  select(AgentId, age_years, female, is_employed, education, irsd_sa1)
  

data %>% st(out='kable')
```

#### Prediction of mMET hours/week for synethic population
```
prediction=MonteCarlo_otherSport(m.otherSport$zeroModel,data)
table(prediction$zeroPrediction)
```

#### Join estimates back onto synthetic population
```
nonzeroPP = prediction %>% filter(!zeroPrediction)

nonzeroPP_predict = nonzeroPP %>% mutate(
    wkhrPrediction=predict.lm(m.otherSport$linear,nonzeroPP)
    )
nonzeroPP_predict = nonzeroPP_predict%>%mutate(mmetHr_total=pmax(0,wkhrPrediction))
pp=pp%>%left_join(nonzeroPP_predict%>%select(AgentId,otherSport_wkhr))
pp[is.na(pp)] <- 0
summary(pp$mmetHr_total)
ggplot(pp)+stat_ecdf(aes(x=mmetHr_total))
coef(m.otherSport$zeroinfl)
coef(m.otherSport$zeroinfl, model = "count")
```

```

write_csv(pp,"manchester/physicalActivity/pp_health_2021_withOtherSport.csv")


```